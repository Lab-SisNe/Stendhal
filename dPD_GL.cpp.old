/*
filename: PD_GL.cpp

This code simulates the PD microcircuit model (Potjans and Diesmann, 2014)
with the GL (Galves and Locherbach, 2013) neuron in discrete time.

This code is part of STENDHAL package.
A NeuroMat package for simulate neuron networks, and analyse data.

Director:
Antonio Galves

Developers:
Nilton L. Kamiji
Christophe Pouzat
Renan Shimoura

Contributors:
Karine Guimaraes
Aline Duarte
Jorge Stolfi
Antonio Roque

Aug 11, 2020
*/

//#include <iostream>
#include "dPD_GL.hpp"

namespace stendhal
{
  // dPD_GL constructor
  dPD_GL::dPD_GL()
  {
  private:
    struct simulation_parameters sim_params;
    struct network_parameters net_params;

    // Seed random number generator
    rng.seed(seed);
    
    // Initialize network
    for (int i=0; i<net_params.N_layers; i++) {
      // get default buffer lenght
      int buffer_len = (int)(net_params.buffer_len_ms/sim_params.dt);
      // scale number of neurons per layers
      N_scaled[i] = (int)(N_full[i]*N_scaling);
      // Initialize layer class
      layer[i] = new layer_class(N_scaled[i], buffer_len);
    }

    // Gennerate poisson input or DC input (if no poisson input is provided)
    if (net_params.poisson_input)
      for (int i; i<net_params.N_layers; i++) {
	
      }
    else // set DC input if no poisson input is provided
      // ToDo: Re-write to account for rescaling.
      for (int i; i<net_params.N_layers; i++) {
	DC = net_params.bg_rate * net_params.K_ext[i] * net_params.PSP_e * \
	  layer[i].neuron_params.tau_syn_ex * 1e-3;
		
      }
    
  public:
    
    
  } // class dPD_DL constructor

  // dPD_GL constructor with seed
  dPD_GL::dPD_GL(int s):
    seed(s);
  {
    dPD_GL();
  } // dPD_GL constructor with seed
  
  // dPD_GL destructor
  dPD_GL::~dPD_GL()
  {
  } // dPD_GL desctructor

  // member layer constructor
  dPD_GL::layer_class::layer_class(int N, int len):
    size(N)
  {
    V_m = new double[N];
    I_syn_ex = new double[N];
    I_syn_in = new double[N];
    I_ext = new double[N];
    is_ref = new int[N];
    W_ex = new vector<double>[N];
    W_in = new vector<double>[N];
    for (int i=0; i<N; i++) {
      W_ex[i].resize(len, 0.0);
      W_in[i].resize(len, 0.0);
    }
  } // member layer constructor
  
  // layer destructor
  // delete allocated memory
  dPD_GL::layer_class::~layer_class()
  {
    delete []V_m;
    delete []I_syn_ex;
    delete []I_syn_in;
    delete []I_ext;
    delete []is_ref;
    delete []W_ex;
    delete []W_in;
  } // member layer destructor

  
  void PD_GL_::print_N_full(void)
  {
    for (int n: net_params.N_full)
      std::cout << n << '\n';
  }
    
  void PD_GL_::print_conn_prob(int i, int j)
  {
    std::cout << i << ", " << j << ": " << net_params.conn_prob[i][j] << std::endl;
  }

} // namespace stendhal

